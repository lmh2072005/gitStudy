1. 操作符

git
allitems

html5标准事件


一：操作符
（一）.一元操作符
只能操作一个值的操作符叫做一元操作符
1.递增和递减操作符
a. 在应用于一个包含有效数字字符的字符串时，先将其转换为数字值，再执行加减1的操作。字
符串变量变成数值变量。
eg: var a='1'; ++a;  //a 变成2
b.在应用于一个不包含有效数字字符的字符串时，将变量的值设置为NaN,字符串变量变成数值变量。
eg:var a='1aa';++a  //a 变成NaN
c:在应用于布尔值false时，先将其转换为0再执行加减1的操作。布尔值变量变成数值变量。
eg:var a=false;++a  //a 变成1
d:在应用于布尔值true时，先将其转换为1再执行加减1的操作。布尔值变量变成数值变量。
eg:var a=true;++a  //a 变成2
e:在应用于浮点数值时，执行加减1的操作。
eg：var a=1.1;++a  //a 变成2.1
f:在应用于对象时，先调用对象的valueOf()方法（第5章将详细讨论）以取得一个可供操作的
值。然后对该值应用前述规则。如果结果是NaN，则在调用toString()方法后再应用前述规
则。对象变量变成数值变量。
eg:var a=[];++a; //a变成1；内部操作原则：先把a调用valueOf()如果返回的是对象则再调用toString()，再对结果转换为Number按照一元操作符计算

由此可见对于一元操作符来说都是先把变量转换为Number类型 ，再进行计算。先Number(变量)，再计算。
2. 一元加和减操作符
在对非数值应用一元加操作符时，该操作符会像Number()转型函数一样对这个值执行转换。
换句话说，布尔值false和true将被转换为0和1，字符串值会被按照一组特殊的规则进行解析，而对象是先调用它们的valueOf()和（或）toString()方法，再转换得到的值。
下面的例子展示了对不同数据类型应用一元加操作符的结果：
var s1 = "01"; 
var s2 = "1.1"; 
var s3 = "z"; 
var b = false; 
var f = 1.1; 
var o = { 
valueOf: function() { 
     return -1; 
  } 
}; 
s1 = +s1;  // 值变成数值1 
s2 = +s2;  // 值变成数值1.1 
s3 = +s3;  // 值变成NaN 
b = +b;  // 值变成数值0 
f = +f;  // 值未变，仍然是1.1 
o = +o;  // 值变成数值-1

一元减操作符主要用于表示负数，例如将1转换成-1
在将一元减操作符应用于数值时，该值会变成负数。而当应用于非数值时，
一元减操作符遵循与一元加操作符相同的规则，最后再将得到的数值转换为负数，如下面的例子所示：
var s1 = "01"; 
var s2 = "1.1"; 
var s3 = "z"; 
var b = false; 
var f = 1.1; 
var o = { 
  valueOf: function() { 
    return -1; 
  } 
}; 
s1 = -s1; // 值变成了数值-1 
s2 = -s2; // 值变成了数值-1.1 
s3 = -s3; // 值变成了NaN 
b = -b; // 值变成了数值0 
f = -f; // 变成了-1.1 
o = -o; // 值变成了数值1 
一元加和减操作符主要用于基本的算术运算，也可以像前面示例所展示的一样用于转换数据类型。
（二）位操作符